<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="test" xml:space="preserve">
    <value>TEST ENG</value>
  </data>
  <data name="cannot_delete_deamonfile" xml:space="preserve">
    <value>Cannot delete Daemon file!\n</value>
  </data>
  <data name="cannot_delete_regkeys" xml:space="preserve">
    <value>Cannot delete registery-keys!\n</value>
  </data>
  <data name="cannot_load_deamonfile" xml:space="preserve">
    <value>Cannot load Daemon file!\n</value>
  </data>
  <data name="cannot_save_deamonfile" xml:space="preserve">
    <value>Cannot save Daemon file!\n</value>
  </data>
  <data name="cannot_start_the_service" xml:space="preserve">
    <value>Cannot start the service!</value>
  </data>
  <data name="cannot_start_the_service_already_running" xml:space="preserve">
    <value>The service is aleady running!</value>
  </data>
  <data name="cannot_stop_the_service" xml:space="preserve">
    <value>Cannot stop the service!</value>
  </data>
  <data name="cannot_stop_the_service_already_stopped" xml:space="preserve">
    <value>The service was already stopped!</value>
  </data>
  <data name="data_cannot_be_saved" xml:space="preserve">
    <value>Data cannot be saved!\n</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="error_ui0service" xml:space="preserve">
    <value>The UI0Detect Service cannot be started!</value>
  </data>
  <data name="failed_start_UI0detect_service" xml:space="preserve">
    <value>Failed to start UI0Detect service!</value>
  </data>
  <data name="information" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="interactive_service_regkey_not_set" xml:space="preserve">
    <value>Interactive processes are being blocked by a registery-key. Would you like to turn it off? (The Application cannot run without interactive processes!)</value>
  </data>
  <data name="invalid_path" xml:space="preserve">
    <value>Path to file is invalid or file was deleted!</value>
  </data>
  <data name="invalid_values" xml:space="preserve">
    <value>Invalid values</value>
  </data>
  <data name="max_limit_reached" xml:space="preserve">
    <value>Max limit reached</value>
  </data>
  <data name="problem_occurred" xml:space="preserve">
    <value>Problem occurred</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="service_start_was_successful" xml:space="preserve">
    <value>Service successfully started!</value>
  </data>
  <data name="service_stop_was_successful" xml:space="preserve">
    <value>Service successfully stopped!</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>DeamonMaster Version 1</value>
  </data>
  <data name="success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="the_service_deletion_was_successful" xml:space="preserve">
    <value>Service deletion was successful!</value>
  </data>
  <data name="the_service_deletion_was_unsuccessful" xml:space="preserve">
    <value>Service deletion was not successful!</value>
  </data>
  <data name="the_service_installation_was_successful" xml:space="preserve">
    <value>Service-installation was successful!</value>
  </data>
  <data name="the_service_installation_was_unsuccessful" xml:space="preserve">
    <value>Service-installation was not succesful!</value>
  </data>
  <data name="warning" xml:space="preserve">
    <value>WARNING</value>
  </data>
  <data name="windows10_mouse_keyboard" xml:space="preserve">
    <value>WARNING: In Windows 10 you can't use your mouse or keyboard!</value>
  </data>
  <data name="currently_unavailable" xml:space="preserve">
    <value>Currently unavailable :(</value>
  </data>
  <data name="button_switch_to_session_0" xml:space="preserve">
    <value>Switch to Session 0</value>
  </data>
  <data name="button_add_service" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="button_delete_service" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="button_edit_service" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="button_credits" xml:space="preserve">
    <value>Credits</value>
  </data>
  <data name="button_export" xml:space="preserve">
    <value>Export list</value>
  </data>
  <data name="button_file" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="button_import" xml:space="preserve">
    <value>Import list</value>
  </data>
  <data name="button_save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="button_search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="button_start_service" xml:space="preserve">
    <value>Start Service</value>
  </data>
  <data name="button_stop_service" xml:space="preserve">
    <value>Stop Service</value>
  </data>
  <data name="label_filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="cannot_load_data_from_registry" xml:space="preserve">
    <value>Cannot load data from registry!</value>
  </data>
  <data name="add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="switch_to_session_0" xml:space="preserve">
    <value>Switch to Session 0</value>
  </data>
  <data name="you_must_stop_the_service_first" xml:space="preserve">
    <value>You must stop the service first. Do you want stop the service now ?</value>
  </data>
  <data name="button_help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="button_check_for_updates" xml:space="preserve">
    <value>Check for updates</value>
  </data>
  <data name="do_you_to_use_the_data_of_the_shortcut" xml:space="preserve">
    <value>Do you want to use the data of the shortcut? All existing data will be overwritten!</value>
  </data>
  <data name="button_start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="button_stop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="stop_was_successful" xml:space="preserve">
    <value>Stop was successful!</value>
  </data>
  <data name="stop_was_unsuccessful" xml:space="preserve">
    <value>Stop was unsuccessful! Do you want kill the process?</value>
  </data>
  <data name="the_selected_process_does_not_exist" xml:space="preserve">
    <value>The selected process does not exist!</value>
  </data>
  <data name="button_kill" xml:space="preserve">
    <value>Kill process</value>
  </data>
  <data name="the_process_killing_was_successful" xml:space="preserve">
    <value>The process killing was successful!</value>
  </data>
  <data name="the_process_killing_was_unsuccessful" xml:space="preserve">
    <value>The process killing was unsuccessful!</value>
  </data>
  <data name="start_was_successful" xml:space="preserve">
    <value>Start was successful!</value>
  </data>
  <data name="start_was_unsuccessful" xml:space="preserve">
    <value>Start was unsuccessful!</value>
  </data>
  <data name="the_selected_process_is_already_started" xml:space="preserve">
    <value>The selected process is already started!</value>
  </data>
  <data name="all_processes_will_be_killed" xml:space="preserve">
    <value>All processes will be killed on shutdown (except services)! Are you sure?</value>
  </data>
</root>